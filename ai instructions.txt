1) Stack: 
* файл docker-compose приложен к проекту;
* ссылка на публичный github: https://github.com/Aleksey095599/alligator-market;
* Spring Boot backend;
* Angular (TypeScript) frontend;
* IntelliJ IDEA Ultimate.

2) Инструкция для работы с холстом: 
* Писать на холсте только когда я прошу это делать;
* Вносить правки на холсте только когда я прошу это сделать и в тех местах где я прошу это сделать.

3) Если сообщение пользователя начинается фразой «Задача».
Инструкция для РАССУЖДЕНИЙ модели ChatGPT:
* 1. Максималистичное решение. Проанализируйте лучшие мировые практики, применяемые в крупных успешных проектах для решения аналогичных задач. Выберите наиболее качественные подходы и архитектуры.
* 2. Минимально-достаточное решение. Подберите самое простое и лаконичное решение (KISS), полностью закрывающее текущие требования.
* 3. Итоговое решение. Доработайте минимально-достаточное решение таким образом, чтобы сохраняя простоту и лаконичность, его подходы и архитектура позволяли при необходимости без проблем расширяться к максималистичному решению по мере развития проекта. 
Формат ОТВЕТА:
* 1. Кратко изложить максималистичное решение (без кода);
* 2. Кратко изложить минимально-достаточное решение (без кода);
* 3. Кратко изложить итоговое решение (без кода) и шаги для его реализации (без кода).

4) Правила оформления. 
Общие принципы: Цель оформления НЕ документация, а пояснения для разработчиков. Поэтому при оформлении избегать лишний шум, комментарии должны быть краткие и лаконичные.
Стиль:
* Над каждым объектом краткий комментарий (RU, кроме устоявшихся терминов) передающий его назначение (пример: /* Entity для валютной пары. */), не добавляем комментарий для рутинных и шаблонных объектов (например, конструктор внутри класса);
* Внутри объекта краткие комментарии (RU, кроме устоявшихся терминов) там где это необходимо для легкого восприятия логики кода (пример: // Сохраняем entity в БД), точки ставим если более одного предложения, для наглядности можно применять стрелочки и иные фигуры;
* Текст логов, сообщения исключений, внешние тексты и т.п. — согласно лучшим практикам подобных формулировок (EN).

5) Фундаментальные принцип.
Делать все максимально просто (KISS) для текущих потребностей, не улучшать ради улучшения, но при этом:
* не допускать критических уязвимостей и ошибок;
* продумывать архитектуру и подходы так, чтобы можно было легко при необходимости расширять функционал и добавлять полезные функции.